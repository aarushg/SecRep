from scapy.all import sniff
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import csv
import os

def generate_pdf(data, output_path):
    c = canvas.Canvas(output_path, pagesize=letter)
    width, height = letter
    margin = 40
    y_position = height - margin

    def add_page():
        nonlocal y_position
        c.showPage()
        y_position = height - margin

    # Title
    c.setFont("Helvetica-Bold", 24)
    c.drawString(margin, y_position, "Penetration Testing Report")
    y_position -= 30
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, "Generated by DreamCatcher")
    y_position -= 10
    c.line(margin, y_position, width - margin, y_position)
    y_position -= 30

    # Executive Summary
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Executive Summary")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[25])
    y_position -= 40

    # Client Information
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Client Information")
    y_position -= 20
    c.setFont("Helvetica", 12)
    client_info = f"""
    Client Name: {data[0]}
    Company Name: {data[1]}
    Contact Person: {data[2]}
    Contact Email: {data[3]}
    Contact Phone Number: {data[4]}
    """
    for line in client_info.strip().split('\n'):
        c.drawString(margin, y_position, line.strip())
        y_position -= 15
    y_position -= 10

    # Report Dates
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Report Dates")
    y_position -= 20
    c.setFont("Helvetica", 12)
    report_dates = f"""
    Date of Report: {data[5]}
    Engagement Start Date: {data[6]}
    Engagement End Date: {data[7]}
    """
    for line in report_dates.strip().split('\n'):
        c.drawString(margin, y_position, line.strip())
        y_position -= 15
    y_position -= 10

    # Vulnerabilities Summary
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Vulnerabilities Summary")
    y_position -= 20
    c.setFont("Helvetica", 12)
    vulnerabilities_summary = f"""
    Total Vulnerabilities Found: {data[8]}
    High-Risk Vulnerabilities: {data[9]}
    Medium-Risk Vulnerabilities: {data[10]}
    Low-Risk Vulnerabilities: {data[11]}
    Overall Risk Level: {data[12]}
    """
    for line in vulnerabilities_summary.strip().split('\n'):
        c.drawString(margin, y_position, line.strip())
        y_position -= 15
    y_position -= 10

    # Scope of Engagement
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Scope of Engagement")
    y_position -= 20
    c.setFont("Helvetica", 12)
    scope_of_engagement = f"""
    In-Scope Assets: {data[13]}
    Out of Scope Assets: {data[14]}
    """
    for line in scope_of_engagement.strip().split('\n'):
        c.drawString(margin, y_position, line.strip())
        y_position -= 15
    y_position -= 10

    # Methodology
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Methodology")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[15])
    y_position -= 40

    # Tools Used
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Tools Used")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[16])
    y_position -= 40

    # Vulnerability Summary
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Vulnerability Summary")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[17])
    y_position -= 40

    # Exploitation Details
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Exploitation Details")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[18])
    y_position -= 40

    # Evidence
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Evidence")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[19])
    y_position -= 40

    # Short-Term Recommendations
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Short-Term Recommendations")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[20])
    y_position -= 40

    # Long-Term Recommendations
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Long-Term Recommendations")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[21])
    y_position -= 40

    # Pricing
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Pricing")
    y_position -= 20
    c.setFont("Helvetica", 12)
    pricing_info = f"""
    Basic Package Pricing: {data[22]}
    Standard Package Pricing: {data[23]}
    Premium Package Pricing: {data[24]}
    """
    for line in pricing_info.strip().split('\n'):
        c.drawString(margin, y_position, line.strip())
        y_position -= 15
    y_position -= 10

    # Risk Assessment
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Risk Assessment")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[26])
    y_position -= 40

    # Conclusion
    c.setFont("Helvetica-Bold", 16)
    c.drawString(margin, y_position, "Conclusion")
    y_position -= 20
    c.setFont("Helvetica", 12)
    c.drawString(margin, y_position, data[27])
    y_position -= 40

    c.save()

def main():
    data = []
    if len(os.sys.argv) > 1:
        file_path = os.sys.argv[1]
        try:
            with open(file_path, newline='') as csvfile:
                reader = csv.reader(csvfile)
                next(reader)  # Skip the header row
                data = next(reader)
                if len(data) < 28:
                    print("CSV file does not have enough columns.")
                    return
        except Exception as e:
            print(f"Failed to open CSV file: {e}")
            return
    else:
        data = [
            input("Enter Client Name: "),
            input("Enter Company Name: "),
            input("Enter Contact Person: "),
            input("Enter Contact Email: "),
            input("Enter Contact Phone Number: "),
            input("Enter Date of Report: "),
            input("Enter Engagement Start Date: "),
            input("Enter Engagement End Date: "),
            input("Enter Total Vulnerabilities Found: "),
            input("Enter High-Risk Vulnerabilities: "),
            input("Enter Medium-Risk Vulnerabilities: "),
            input("Enter Low-Risk Vulnerabilities: "),
            input("Enter Overall Risk Level (Low/Medium/High): "),
            input("Enter In-Scope Assets (IP/Hostnames, Web Apps, etc.): "),
            input("Enter Out of Scope Assets: "),
            input("Enter Methodology: "),
            input("Enter Tools Used: "),
            input("Enter Vulnerability Summary: "),
            input("Enter Exploitation Details: "),
            input("Enter Evidence (Screenshots/Logs): "),
            input("Enter Short-Term Recommendations: "),
            input("Enter Long-Term Recommendations: "),
            input("Enter Basic Package Pricing: "),
            input("Enter Standard Package Pricing: "),
            input("Enter Premium Package Pricing: "),
            input("Enter Executive Summary: "),
            input("Enter Risk Assessment: "),
            input("Enter Conclusion: "),
        ]

    output_path = "report.pdf"
    generate_pdf(data, output_path)
    print(f"PDF report generated at {output_path}")

if __name__ == "__main__":
    main()
