from scapy.all import sniff
import csv
import os
import subprocess

def run_sublist3r(domain):
    try:
        result = subprocess.run(['sublist3r', '-d', domain, '-o', 'subdomains.txt'], capture_output=True, text=True)
        if result.returncode != 0:
            print(f"Sublist3r failed: {result.stderr}")
            return []
        with open('subdomains.txt', 'r') as f:
            subdomains = f.read().splitlines()
        return subdomains
    except Exception as e:
        print(f"An error occurred while running Sublist3r: {e}")
        return []

def generate_text_report(data, output_path):
    with open(output_path, 'w') as f:
        def write_section(title, content):
            f.write(f"{title}\n")
            f.write(f"{content}\n\n")

        # Title
        f.write("Penetration Testing Report\n")
        f.write("Generated by DreamCatcher\n")
        f.write("=" * 40 + "\n\n")

        # Executive Summary
        write_section("Executive Summary", data[25])

        # Client Information
        client_info = f"""
Client Name: {data[0]}
Company Name: {data[1]}
Contact Person: {data[2]}
Contact Email: {data[3]}
Contact Phone Number: {data[4]}
"""
        write_section("Client Information", client_info.strip())

        # Report Dates
        report_dates = f"""
Date of Report: {data[5]}
Engagement Start Date: {data[6]}
Engagement End Date: {data[7]}
"""
        write_section("Report Dates", report_dates.strip())

        # Vulnerabilities Summary
        vulnerabilities_summary = f"""
Total Vulnerabilities Found: {data[8]}
High-Risk Vulnerabilities: {data[9]}
Medium-Risk Vulnerabilities: {data[10]}
Low-Risk Vulnerabilities: {data[11]}
Overall Risk Level: {data[12]}
"""
        write_section("Vulnerabilities Summary", vulnerabilities_summary.strip())

        # Scope of Engagement
        scope_of_engagement = f"""
In-Scope Assets: {', '.join(data[13])}
Out of Scope Assets: {data[14]}
"""
        write_section("Scope of Engagement", scope_of_engagement.strip())

        # Methodology
        write_section("Methodology", data[15])

        # Tools Used
        write_section("Tools Used", data[16])

        # Vulnerability Summary
        write_section("Vulnerability Summary", data[17])

        # Exploitation Details
        write_section("Exploitation Details", data[18])

        # Evidence
        write_section("Evidence", data[19])

        # Short-Term Recommendations
        write_section("Short-Term Recommendations", data[20])

        # Long-Term Recommendations
        write_section("Long-Term Recommendations", data[21])

        # Pricing
        pricing_info = f"""
Basic Package Pricing: {data[22]}
Standard Package Pricing: {data[23]}
Premium Package Pricing: {data[24]}
"""
        write_section("Pricing", pricing_info.strip())

        # Risk Assessment
        write_section("Risk Assessment", data[26])

        # Conclusion
        write_section("Conclusion", data[27])

        # Sublist3r Results
        sublist3r_results = []
        sublist3r_summary = []
        for asset in data[13]:
            subdomains = run_sublist3r(asset)
            sublist3r_results.append(f"Subdomains for {asset}:\n" + "\n".join(subdomains))
            sublist3r_summary.append(f"{asset}: {len(subdomains)} subdomains")
        
        f.write("=" * 40 + "\n\n")
        write_section("Sublist3r Results", "\n\n".join(sublist3r_results))
        f.write("=" * 40 + "\n\n")
        write_section("Sublist3r Summary", "\n".join(sublist3r_summary))

def main():
    data = []
    if len(os.sys.argv) > 1:
        file_path = os.sys.argv[1]
        try:
            with open(file_path, newline='') as csvfile:
                reader = csv.reader(csvfile)
                next(reader)  # Skip the header row
                data = next(reader)
                data[13] = data[13].split(',')  # Split the in-scope assets into a list
                if len(data) < 28:
                    print("CSV file does not have enough columns.")
                    return
        except Exception as e:
            print(f"Failed to open CSV file: {e}")
            return
    else:
        data = [
            input("Enter Client Name: "),
            input("Enter Company Name: "),
            input("Enter Contact Person: "),
            input("Enter Contact Email: "),
            input("Enter Contact Phone Number: "),
            input("Enter Date of Report: "),
            input("Enter Engagement Start Date: "),
            input("Enter Engagement End Date: "),
            input("Enter Total Vulnerabilities Found: "),
            input("Enter High-Risk Vulnerabilities: "),
            input("Enter Medium-Risk Vulnerabilities: "),
            input("Enter Low-Risk Vulnerabilities: "),
            input("Enter Overall Risk Level (Low/Medium/High): "),
            input("Enter In-Scope Assets (comma-separated): ").split(','),
            input("Enter Out of Scope Assets: "),
            input("Enter Methodology: "),
            input("Enter Tools Used: "),
            input("Enter Vulnerability Summary: "),
            input("Enter Exploitation Details: "),
            input("Enter Evidence (Screenshots/Logs): "),
            input("Enter Short-Term Recommendations: "),
            input("Enter Long-Term Recommendations: "),
            input("Enter Basic Package Pricing: "),
            input("Enter Standard Package Pricing: "),
            input("Enter Premium Package Pricing: "),
            input("Enter Executive Summary: "),
            input("Enter Risk Assessment: "),
            input("Enter Conclusion: "),
        ]

    output_path = "report.txt"
    generate_text_report(data, output_path)
    print(f"Text report generated at {output_path}")

if __name__ == "__main__":
    main()
